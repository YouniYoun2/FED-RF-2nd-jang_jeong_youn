@charset "utf-8";

/* Robot PJ - 애니메이션 CSS */

/****************************************** 
    [ CSS 애니메이션 ]
    - CSS 속성 변화를 장면으로 구성하여
    애니메이션을 화면에 연출해주는 속성

    [ 애니메이션 키프레임 ]
    - 애니메이션 속성변화를 지정하는 코딩영역

    [ 2장면 코딩법 ]

    @keyframes 키프레임명 {
        from{시작CSS}
        to{끝CSS}
    } 
    또는
    @keyframes 키프레임명 {
        0%{시작CSS}
        100%{끝CSS}
    }
    
    __________________________________

    [ 여러장면 코딩법 ]
    
    @keyframes 키프레임명 {
        0%{시작CSS}
        10%{중간CSS}
        20%{중간CSS}
        ...
        70%{중간CSS}
        90%{중간CSS}
        100%{끝CSS}
    }

    -> 만약 첫장면이 이미 CSS에 설정되어 있으면
    from 또는 0% 를 생략할 수 있다!

    __________________________________

    [ 애니메이션 연출 시간 계산법 ]

    - 내가 지정한 %의 장면은 언제 등장하는가?

    전체시간(초) * 몇% / 100 = 알고싶은시간

    예) 60초 * 50%/100% = 30초
    __________________________________


    [ 설정된 키프레임 호출하는 방법 ]

    animation : 이시이지반방마💥
    (이름 시간 이징 지연 반복 방향 마지막상태)

    1) 이름(animation-name) : keyframe 이름
    2) 시간(animation-duration) : 애니메이션 동작시간(초단위:s)
    3) 이징(animation-timing-function) : easing 가속도
    4) 지연(animation-delay) : 애니메이션 시작지연시간(초단위:s)
    5) 반복여부(animation-iteration-count) : 애니메이션 반복횟수
        - 기본값 1, 숫자를 쓰면 반복횟수
        - 영원히는 infinite(인피니트)
    6) 방향(animation-direction) : 시작->끝
        - 대체경로 설정하기 : alternate : 시작->끝,끝->시작 (왔다갔다)
        - 대체경로는 반복횟수가 2이상 또는 infinite 이여야함
    7) 마지막상태(animation-fill-mode) : 애니메이션이 끝났을때
        - 처음상태로 돌아가는 것이 기본!(backwards)
        - 마지막 상태를 유지하고 싶을때 forwards(앞쪽에...즉,애니끝장면)
 


******************************************/

/* 1. 로고 애니 */
.logo{
    /* 처음 출발 크기 지정 */
    transform: scale(2);

    animation:
    logo-ani 3s linear alternate forwards,              /* 1초 후 3초간 이동애니 세팅 */
    swing-ani .4s ease-in-out 4s infinite alternate;     /* 4초 후 스윙애니 영원히 세팅 */
}

@keyframes logo-ani{
    0%{     /* 정가운데 출발 */
        top: calc(50% - 10vw);
        left: calc(50% - 10vw);
        transform: scale(2);
    }
    20%{    /* 처음 위치 이동 : 왼쪽 위 */
        top: calc(0% + 5vw);
        left: calc(0% + 5vw);
        transform: scale(.5);
    }
    40%{    /* 두번째 위치 이동 : 오른쪽 위 */
        top: calc(0% + 5vw);
        left: calc(100% - 25vw);
        transform: scale(.5);
    }
    60%{    /* 세번째 위치 이동 : 오른쪽 아래 */
        top: calc(100% - 25vw);
        left: calc(100% - 25vw);
        transform: scale(.5);
    }
    80%{   /* 네번째 위치 이동 : 왼쪽 아래 */
        top: calc(100% - 25vw);
        left: calc(0% + 5vw);
        transform: scale(.5);
        
    }
    90%{   /* 처음 위치(왼쪽 위)로 컴백 */
        top: calc(0% + 5vw);
        left: calc(0% + 5vw);
        transform: scale(1);
    }
    100%{   /* 다음 스윙애니 출발 각도로 미리 돌려놓기 */
        top: calc(0% + 5vw);
        left: calc(0% + 5vw);
        transform: scale(1) rotate(30deg);
    }
}

/* 제자리 스윙 애니 */
@keyframes swing-ani{
    from{
        transform: scale(1) rotate(30deg); 
    }
    to{ 
        transform: scale(1) rotate(-30deg);
    }
}

/* 2. 로봇이동애니 */
.robot-box {  
    /* 애니메이션 : 이시이지반방마 */
    animation: move-robot 4s ease-in-out 2s forwards;
    /* 4초후 4초간 한번만 끝상태유지 */
}

@keyframes move-robot {
    to {
        transform: translate(-50%, 0%) scale(0.7);
    }
}

/* 로봇 다리 작동 애니 (내가함) */
/* 왼다리 */
.leg1 {
    animation: leg-ani .3s alternate 21;
}
@keyframes leg-ani {
    from{
        height: calc(0% + 6vw); 
    } 
}
/* 오른다리 */
.leg2 {
    animation: leg-ani .3s alternate .3s 21;
}
@keyframes leg-ani {
    from{
        height: calc(0% + 6vw);
    }
}


/*  로봇 다리 작동 애니 (강사님 ver)
.leg{
    animation: leg-ani .3s ease-in-out 4s 12 alternate;
    // 0.3초 애니시간으로 4초 후에 12번 작동.
    // alternate때문에 반대로 작동하는 횟수가 더해짐
    // from->to 6회 / to-from 6회
}
// 한쪽 다리는 올라간 다음 올라가야 하므로 애니 시작 지연시간을 준다.

.leg2{
    // 한 방향이 0.3초이므로 0.3초만 기다리면 됨!
    + 전체 기다림 시간 4초를 더함
    animation-delay: .3s

@keyframes leg-ani {
    to{
        top: 76%;
    }
}
 */


 /* 팔 공통 transform 세로축 기준 top으로 변경 */
 .arm,
 .arm span,
 .arm span::after{
     transform-origin: top;  /* tfo. 회전 기준축 */
 }
/* 4. 로봇 왼팔 허리에 올리기 */
.arm1{
    animation: left-arm-ani1 .4s 5s forwards;   
}
@keyframes left-arm-ani1 {
    to{
        transform: rotate(40deg);   /* 회전 */
    }
}
/* 왼쪽팔 하단 들기 */
.arm1 span{
    animation: left-arm-ani2 .4s 5s forwards;   
    /* animation: left-arm-ani2 .5s 5s forwards infinite;    */
}
@keyframes left-arm-ani2 {
    to{
        transform: rotate(-100deg);   /* 회전 */
    }
}
/* 왼쪽손 들기 */
.arm1 span::after{
    /* animation: left-arm-ani2 .4s 5s forwards;    */
    animation: left-arm-ani3 .5s 5s forwards;   
}
@keyframes left-arm-ani3 {
    to{
        transform: rotate(70deg);   /* 회전 */
    }
}


/* 5. 로봇 오른팔 손흔들기 */
.arm2{
    animation:
    /* 팔 올리기 */
    right-arm-ani1 .4s 5s forwards,
    /* 팔 흔들기(팔 올린 후 지연 9.4초) */
    right-arm-ani2 1s ease-in-out 5.4s infinite alternate;
}

/* 팔 올리기 키프레임 */
@keyframes right-arm-ani1 {
    to{
        transform: rotate(-150deg);
    }
}
/* 팔 흔들기 키프레임 */
@keyframes right-arm-ani2 {
    to{
        transform: rotate(-130deg);
    }
}

/* 오른쪽 팔꿈치 살짝 움직이기 */
.arm2 span{
    animation: right-arm-ani3 1s ease-in-out 5.4s infinite alternate-reverse;
}
/* 오른쪽 팔꿈치 키프레임 */
@keyframes right-arm-ani3 {
    to {
        transform: rotate(-25deg);
    }
}

/* 오른손 */
.arm2 span::after{
    animation: right-arm-ani4 1s 5s forwards;
}
/* 오른손 키프레임 */
@keyframes right-arm-ani4 {
    to {
        transform: rotate(-15deg);
        left: -13px;
    }
}

/* 말풍선 나타내기 애니 */
/* .link-title{
    animation: tool-box 1s ease-in 1s forwards;
} */